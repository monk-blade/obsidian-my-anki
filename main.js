/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS2 = CryptoJS2 || function(Math2, undefined2) {
        var crypto;
        if (typeof window !== "undefined" && window.crypto) {
          crypto = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto = globalThis.crypto;
        }
        if (!crypto && typeof window !== "undefined" && window.msCrypto) {
          crypto = window.msCrypto;
        }
        if (!crypto && typeof global !== "undefined" && global.crypto) {
          crypto = global.crypto;
        }
        if (!crypto && typeof require === "function") {
          try {
            crypto = require("crypto");
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto) {
            if (typeof crypto.getRandomValues === "function") {
              try {
                return crypto.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto.randomBytes === "function") {
              try {
                return crypto.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          random: function(nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS2.SHA256;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AwesomeFlashcardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/manager.ts
var import_obsidian2 = require("obsidian");

// src/utils.ts
var import_crypto = require("crypto");
var import_sha256 = __toESM(require_sha256());
var import_core = __toESM(require_core());
function genSha256FromStr(s) {
  return (0, import_crypto.createHash)("sha256").update(s).digest("hex");
}
function genSha256FromArrayBuf(data) {
  return (0, import_sha256.default)(arrayBufferToWordArray(data)).toString().toLowerCase();
}
function arrayBufferToWordArray(ab) {
  const i8a = new Uint8Array(ab);
  const a = [];
  for (let i = 0; i < i8a.length; i += 4) {
    a.push(i8a[i] << 24 | i8a[i + 1] << 16 | i8a[i + 2] << 8 | i8a[i + 3]);
  }
  return import_core.default.lib.WordArray.create(a, i8a.length);
}
function unionRecords(a, b) {
  const ret = {};
  for (let k in a) {
    ret[k] = a[k];
  }
  for (let k in b) {
    ret[k] = b[k];
  }
  return ret;
}
function getTagsFromRaw(rawTag) {
  let tags;
  if (rawTag instanceof Array) {
    tags = rawTag;
  } else {
    tags = ("" + rawTag).replaceAll("#", " ").split(" ").filter((a) => a);
  }
  return tags;
}

// src/anki.ts
var ANKI_PORT = 8765;
function invoke(action, params = {}) {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    xhr.addEventListener("error", () => reject("failed to issue request"));
    xhr.addEventListener("load", () => {
      try {
        const response = JSON.parse(xhr.responseText);
        if (Object.getOwnPropertyNames(response).length != 2) {
          return reject(Error("response has an unexpected number of fields"));
        }
        if (!response.hasOwnProperty("error")) {
          return reject(Error("response is missing required error field"));
        }
        if (!response.hasOwnProperty("result")) {
          return reject(Error("response is missing required result field"));
        }
        if (response.error) {
          return reject(response.error);
        }
        resolve(response.result);
      } catch (e) {
        reject(e);
      }
    });
    xhr.open("POST", "http://127.0.0.1:" + ANKI_PORT.toString());
    xhr.send(JSON.stringify({ action, version: 6, params }));
  });
}
async function getAnkiNoteHashes() {
  const tags = await invoke("getTags");
  console.log("getAnkiNoteHashes tag list: ", tags);
  return tags.filter((a) => a.startsWith("idsha256")).map((a) => a.slice(8)).filter((a) => a.length === 64);
}
async function batchDelNotesBySha256(shaArr) {
  let allNoteIds = [];
  for (let sha of shaArr) {
    const noteIds = await findNotesBySha256(sha);
    allNoteIds = allNoteIds.concat(noteIds);
  }
  console.log("Requesting batchDelNotesBySha256, shaArr: ", shaArr, " allNoteIds: ", allNoteIds);
  if (!allNoteIds) {
    return;
  }
  await invoke("deleteNotes", { "notes": allNoteIds });
}
async function findNotesBySha256(sha) {
  const tag = "idsha256" + sha;
  return await invoke("findNotes", { "query": "tag:" + tag });
}
async function ensureDecksExist(deckNames) {
  for (let deckName of deckNames) {
    await invoke("createDeck", { "deck": deckName });
  }
}
async function clearUnusedTags() {
  console.info("Requesting clearUnusedTags...");
  await invoke("clearUnusedTags");
}
async function mediaFileExists(filename) {
  console.info("Requesting mediaFileExists...");
  const files = await invoke("getMediaFilesNames", { "pattern": filename });
  console.log("files: ", files);
  return files.length > 0;
}
async function storeMediaFile(filename, data) {
  console.info("Requesting storeMediaFile...");
  await invoke("storeMediaFile", {
    filename,
    data
  });
}
async function batchModNotes(notes) {
  for (let note of notes) {
    try {
      await invoke("addNote", { "note": note.note });
    } catch (err) {
      if (err === "cannot create note because it is a duplicate") {
        const curNoteIds = await findNotesBySha256(note.idSha256);
        const modNote = {
          "id": curNoteIds[0],
          ...note.note
        };
        console.log("batchModNotes-->Updating note: ", modNote);
        await invoke("updateNoteFields", { "note": modNote });
        await syncTags(curNoteIds[0], note);
      } else {
        throw err;
      }
    }
  }
}
async function syncTags(noteId, note) {
  const ankiNote = await invoke("notesInfo", { "notes": [noteId] });
  const oldTags = ankiNote[0].tags;
  const newTags = note.note.tags;
  const tagsToDel = oldTags.filter((e) => !newTags.includes(e));
  const tagsToAdd = newTags.filter((e) => !oldTags.includes(e));
  await invoke("removeTags", { "notes": [noteId], "tags": tagsToDel.join(" ") });
  await invoke("addTags", { "notes": [noteId], "tags": tagsToAdd.join(" ") });
}

// src/note.ts
var AnkiConnectNote = class {
  constructor(deckName, fieldsFront, fieldsBack, tags) {
    this.deckName = deckName;
    this.modelName = "Basic";
    this.fields = {
      Front: fieldsFront,
      Back: fieldsBack
    };
    this.tags = tags;
    this.options = {
      allowDuplicate: false,
      duplicateScope: "deck"
    };
  }
};
var AnkiConnectNoteExt = class {
  constructor(deckName, fieldsFront, fieldsBack, tags, filePath) {
    this.note = new AnkiConnectNote(
      deckName,
      fieldsFront,
      fieldsBack,
      tags
    );
    this.filePath = filePath;
    this.idSha256 = genSha256FromStr(this.note.deckName + this.note.fields.Front);
    const idTag = "idsha256" + this.idSha256;
    if (!this.note.tags.includes(idTag)) {
      this.note.tags.push(idTag);
    }
  }
};

// src/constants.ts
var NOTICE_TIMEOUT = 10 * 1e3;
var TIMEOUT_LIKE_INFINITY = 24 * 60 * 60 * 1e3;
var ANKI_ICON = `<path fill="currentColor" stroke="currentColor" d="M 27.00,3.53 C 18.43,6.28 16.05,10.38 16.00,19.00 16.00,19.00 16.00,80.00 16.00,80.00 16.00,82.44 15.87,85.73 16.74,88.00 20.66,98.22 32.23,97.00 41.00,97.00 41.00,97.00 69.00,97.00 69.00,97.00 76.63,96.99 82.81,95.84 86.35,88.00 88.64,82.94 88.00,72.79 88.00,67.00 88.00,67.00 88.00,24.00 88.00,24.00 87.99,16.51 87.72,10.42 80.98,5.65 76.04,2.15 69.73,3.00 64.00,3.00 64.00,3.00 27.00,3.53 27.00,3.53 Z M 68.89,15.71 C 74.04,15.96 71.96,19.20 74.01,22.68 74.01,22.68 76.72,25.74 76.72,25.74 80.91,30.85 74.53,31.03 71.92,34.29 70.70,35.81 70.05,38.73 67.81,39.09 65.64,39.43 63.83,37.03 61.83,36.00 59.14,34.63 56.30,35.24 55.08,33.40 53.56,31.11 56.11,28.55 56.20,25.00 56.24,23.28 55.32,20.97 56.20,19.35 57.67,16.66 60.89,18.51 64.00,17.71 64.00,17.71 68.89,15.71 68.89,15.71 Z M 43.06,43.86 C 49.81,45.71 48.65,51.49 53.21,53.94 56.13,55.51 59.53,53.51 62.94,54.44 64.83,54.96 66.30,56.05 66.54,58.11 67.10,62.74 60.87,66.31 60.69,71.00 60.57,74.03 64.97,81.26 61.40,83.96 57.63,86.82 51.36,80.81 47.00,82.22 43.96,83.20 40.23,88.11 36.11,87.55 29.79,86.71 33.95,77.99 32.40,74.18 30.78,70.20 24.67,68.95 23.17,64.97 22.34,62.79 23.39,61.30 25.15,60.09 28.29,57.92 32.74,58.49 35.44,55.57 39.11,51.60 36.60,45.74 43.06,43.86 Z" />`;

// src/markdown.ts
var import_obsidian = require("obsidian");
var import_path = __toESM(require("path"));
async function mdToHtml(plugin, content) {
  const el = createDiv();
  await import_obsidian.MarkdownRenderer.renderMarkdown(content, el, ".", null);
  let html = el.innerHTML;
//DONE console.log('This is innerHTML : 🔴' + html);
  html = await replaceAndUploadMedia(
    html,
    //new RegExp('(<div src="(.+?\\.(gif|jpe?g|tiff?|png|webp|bmp))" class="internal-embed"></div>)', "gi"),
    new RegExp('(<span alt=(.*) src="(.+?\\.(gif|jpe?g|tiff?|png|webp|bmp))" class="internal-embed">(.*)<\\/span>)', 'gi'),
    (s) => `<img alt="" src="${s}">`,
    plugin
  );
  //TODO
  html = await replaceAndUploadMedia(
    html,
    new RegExp('(<div src="(.+?\\.(wav|mp3|mid|oga|weba|flac))" class="internal-embed"></div>)', "gi"),
    (s) => `<audio controls autoplay="true" src="${s}">`,
    plugin
  );
  //TODO
  html = await replaceAndUploadMedia(
    html,
    new RegExp('(<div src="(.+?\\.(mp4|mov|wmv|mkv|flv|avi|webm))" class="internal-embed"></div>)', "gi"),
    (s) => `<video controls autoplay="true" src="${s}">`,
    plugin
  );
  return `<style>@import url("_obsidian_card.css");</style><div class="obsidian-card">${html}</div>`;
}
async function replaceAndUploadMedia(html, regex, newTagGen, plugin) {
  for (let { mediaTag, mediaPath } of extractMediaFromHtml(html, regex)) {
    console.log("mediaTag is: ", mediaTag, " mediaPath is: ", mediaPath);
    const mediaFullPath = getLinkFullPath(plugin.app, mediaPath);
    if (!mediaFullPath) {
      continue;
    }
    const mediaData = await plugin.app.vault.adapter.readBinary(mediaFullPath);
    const mediaSha256 = genSha256FromArrayBuf(mediaData);
    const mediaBase64 = btoa(new Uint8Array(mediaData).reduce(function(data, byte) {
      return data + String.fromCharCode(byte);
    }, ""));
    const mediaExt = mediaFullPath.split(".").pop();
    const newMediaFullPath = `${mediaSha256}.${mediaExt}`;
    if (!await mediaFileExists(newMediaFullPath)) {
      await storeMediaFile(newMediaFullPath, mediaBase64);
    }
    const newMediaTag = newTagGen(newMediaFullPath);
    html = html.replace(mediaTag, newMediaTag);
  }
  return html;
}
function getLinkFullPath(app, link) {
  const resolvedLinks = app.metadataCache.resolvedLinks;
  for (const noteFullPath in resolvedLinks) {
    for (const linkFullPath in resolvedLinks[noteFullPath]) {
      if (import_path.default.basename(linkFullPath) === import_path.default.basename(link) && linkFullPath.contains(link)) {
        return linkFullPath;
      }
    }
  }
  return null;
}
function extractMediaFromHtml(content, regex) {
  const res = [];
  for (let match of content.matchAll(regex)) {
//    const m = { mediaTag: match[1], mediaPath: match[2] };
      const m = { mediaTag: match[1], mediaPath: match[3] };
    res.push(m);
  }
  return res;
}

// src/_obsidian_card.txt
var obsidian_card_default = ".obsidian-card {\n	text-align: left;\n}\n.mobile code.is-loaded {\n	zoom: 30%;\n}\ncode.is-loaded {\n	zoom: 70%;\n}\nbutton.copy-code-button {\n	display: none;\n}\n\nbody {\n  /*\n	List of variables is placed in body rather than :root so\n	that we can	combine all property types including colors\n	and sort alphabetically to maximize readability in\n	the compiled app.css file.\n	----------------------------------------------------- */\n  /* Animations */\n  --anim-duration-none: 0;\n  --anim-duration-superfast: 70ms;\n  --anim-duration-fast: 140ms;\n  --anim-duration-moderate: 300ms;\n  --anim-duration-slow: 560ms;\n  --anim-motion-smooth: cubic-bezier(0.45, 0.05, 0.55, 0.95);\n  --anim-motion-delay: cubic-bezier(0.65, 0.05, 0.36, 1);\n  --anim-motion-jumpy: cubic-bezier(0.68, -0.55, 0.27, 1.55);\n  --anim-motion-swing: cubic-bezier(0, 0.55, 0.45, 1);\n  /* Blockquotes */\n  --blockquote-border-thickness: 2px;\n  --blockquote-border-color: var(--interactive-accent);\n  --blockquote-font-style: normal;\n  --blockquote-color: inherit;\n  --blockquote-background-color: transparent;\n  /* Bold */\n  --bold-weight: var(--font-semibold);\n  --bold-color: inherit;\n  /* Borders */\n  --border-width: 1px;\n  /* Buttons */\n  --button-radius: var(--input-radius);\n  /* Callouts */\n  --callout-border-width: 0px;\n  --callout-border-opacity: 0.25;\n  --callout-padding: var(--size-4-3) var(--size-4-3) var(--size-4-3) var(--size-4-6);\n  --callout-radius: var(--radius-s);\n  --callout-blend-mode: var(--highlight-mix-blend-mode);\n  --callout-title-color: inherit;\n  --callout-title-padding: 0;\n  --callout-title-size: inherit;\n  --callout-content-padding: 0;\n  --callout-content-background: transparent;\n  --callout-bug: var(--color-red-rgb);\n  --callout-default: var(--color-blue-rgb);\n  --callout-error: var(--color-red-rgb);\n  --callout-example: var(--color-purple-rgb);\n  --callout-fail: var(--color-red-rgb);\n  --callout-important: var(--color-cyan-rgb);\n  --callout-info: var(--color-blue-rgb);\n  --callout-question: var(--color-yellow-rgb);\n  --callout-success: var(--color-green-rgb);\n  --callout-summary: var(--color-cyan-rgb);\n  --callout-tip: var(--color-cyan-rgb);\n  --callout-todo: var(--color-blue-rgb);\n  --callout-warning: var(--color-orange-rgb);\n  --callout-quote: 158, 158, 158;\n  /* Canvas */\n  --canvas-dot-pattern: var(--color-base-30);\n  --canvas-color-1: var(--color-red-rgb);\n  --canvas-color-2: var(--color-orange-rgb);\n  --canvas-color-3: var(--color-yellow-rgb);\n  --canvas-color-4: var(--color-green-rgb);\n  --canvas-color-5: var(--color-cyan-rgb);\n  --canvas-color-6: var(--color-purple-rgb);\n  /* Checkboxes */\n  --checkbox-radius: var(--radius-s);\n  --checkbox-size: var(--font-text-size);\n  --checkbox-marker-color: var(--background-primary);\n  --checkbox-color: var(--interactive-accent);\n  --checkbox-color-hover: var(--interactive-accent-hover);\n  --checkbox-border-color: var(--text-faint);\n  --checkbox-border-color-hover: var(--text-muted);\n  --checklist-done-decoration: line-through;\n  --checklist-done-color: var(--text-muted);\n  /* Code */\n  --code-white-space: pre-wrap;\n  --code-size: var(--font-smaller);\n  --code-background: var(--background-primary-alt);\n  --code-normal: var(--text-muted);\n  --code-comment: var(--text-faint);\n  --code-function: var(--color-yellow);\n  --code-important: var(--color-orange);\n  --code-keyword: var(--color-pink);\n  --code-operator: var(--color-red);\n  --code-property: var(--color-cyan);\n  --code-punctuation: var(--text-muted);\n  --code-string: var(--color-green);\n  --code-tag: var(--color-red);\n  --code-value: var(--color-purple);\n  /* Collapse icons */\n  --collapse-icon-color: var(--text-faint);\n  --collapse-icon-color-collapsed: var(--text-accent);\n  /* Cursor */\n  --cursor: default;\n  --cursor-link: pointer;\n  /* Dialogs - e.g. small modals, confirmations */\n  --dialog-width: 560px;\n  --dialog-max-width: 80vw;\n  --dialog-max-height: 85vh;\n  /* Dividers \xE2\u20AC\u201D between panes */\n  --divider-color: var(--background-modifier-border);\n  --divider-color-hover: var(--interactive-accent);\n  --divider-width: 1px;\n  --divider-width-hover: 3px;\n  --divider-vertical-height: calc(100% - var(--header-height));\n  /* Dragging */\n  --drag-ghost-background: rgba(0, 0, 0, 0.85);\n  --drag-ghost-text-color: #fff;\n  /* Embeds */\n  --embed-max-height: 4000px;\n  --embed-canvas-max-height: 400px;\n  --embed-background: inherit;\n  --embed-border-left: 2px solid var(--interactive-accent);\n  --embed-border-right: none;\n  --embed-border-top: none;\n  --embed-border-bottom: none;\n  --embed-padding: 0 0 0 var(--size-4-6);\n  --embed-font-style: inherit;\n  /* Blocks */\n  --embed-block-shadow-hover: 0 0 0 1px var(--background-modifier-border),\n	inset 0 0 0 1px var(--background-modifier-border);\n  /* File layout */\n  --file-line-width: 700px;\n  --file-folding-offset: 24px;\n  --file-margins: var(--size-4-8);\n  --file-header-font-size: var(--font-ui-small);\n  --file-header-font-weight: 400;\n  --file-header-border: var(--border-width) solid transparent;\n  --file-header-justify: center;\n  /* Relative font sizes */\n  --font-smallest: 0.8em;\n  --font-smaller: 0.875em;\n  --font-small: 0.933em;\n  /* UI font sizes */\n  --font-ui-smaller: 12px;\n  --font-ui-small: 13px;\n  --font-ui-medium: 15px;\n  --font-ui-large: 20px;\n  /* Font weights */\n  --font-thin: 100;\n  --font-extralight: 200;\n  --font-light: 300;\n  --font-normal: 400;\n  --font-medium: 500;\n  --font-semibold: 600;\n  --font-bold: 700;\n  --font-extrabold: 800;\n  --font-black: 900;\n  /* Footnotes */\n  --footnote-size: var(--font-smaller);\n  /* Graphs */\n  --graph-controls-width: 240px;\n  --graph-text: var(--text-normal);\n  --graph-line: var(--color-base-35, var(--background-modifier-border-focus));\n  --graph-node: var(--text-muted);\n  --graph-node-unresolved: var(--text-faint);\n  --graph-node-focused: var(--text-accent);\n  --graph-node-tag: var(--color-green);\n  --graph-node-attachment: var(--color-yellow);\n  /* Headings */\n  --heading-formatting: var(--text-faint);\n  --h1-color: inherit;\n  --h2-color: inherit;\n  --h3-color: inherit;\n  --h4-color: inherit;\n  --h5-color: inherit;\n  --h6-color: inherit;\n  --h1-font: inherit;\n  --h2-font: inherit;\n  --h3-font: inherit;\n  --h4-font: inherit;\n  --h5-font: inherit;\n  --h6-font: inherit;\n  --h1-line-height: 1.2;\n  --h2-line-height: 1.2;\n  --h3-line-height: 1.3;\n  --h4-line-height: 1.4;\n  --h5-line-height: var(--line-height-normal);\n  --h6-line-height: var(--line-height-normal);\n  --h1-size: 2em;\n  --h2-size: 1.6em;\n  --h3-size: 1.37em;\n  --h4-size: 1.25em;\n  --h5-size: 1.12em;\n  --h6-size: 1.12em;\n  --h1-style: normal;\n  --h2-style: normal;\n  --h3-style: normal;\n  --h4-style: normal;\n  --h5-style: normal;\n  --h6-style: normal;\n  --h1-variant: normal;\n  --h2-variant: normal;\n  --h3-variant: normal;\n  --h4-variant: normal;\n  --h5-variant: normal;\n  --h6-variant: normal;\n  --h1-weight: 700;\n  --h2-weight: 600;\n  --h3-weight: 600;\n  --h4-weight: 600;\n  --h5-weight: 600;\n  --h6-weight: 600;\n  /* View header */\n  --header-height: 40px;\n  /* Horizontal rules */\n  --hr-color: var(--background-modifier-border);\n  --hr-thickness: 2px;\n  /* Icons */\n  --icon-size: var(--icon-m);\n  --icon-stroke: var(--icon-m-stroke-width);\n  --icon-xs: 14px;\n  --icon-s: 16px;\n  --icon-m: 18px;\n  --icon-l: 18px;\n  --icon-xl: 32px;\n  --icon-xs-stroke-width: 2px;\n  --icon-s-stroke-width: 2px;\n  --icon-m-stroke-width: 1.75px;\n  --icon-l-stroke-width: 1.75px;\n  --icon-xl-stroke-width: 1.25px;\n  --icon-color: var(--text-muted);\n  --icon-color-hover: var(--text-muted);\n  --icon-color-active: var(--text-accent);\n  --icon-color-focused: var(--text-normal);\n  --icon-opacity: 0.85;\n  --icon-opacity-hover: 1;\n  --icon-opacity-active: 1;\n  --clickable-icon-radius: var(--radius-s);\n  /* Indentation guide */\n  --indentation-guide-width: 1px;\n  --indentation-guide-color: rgba(var(--mono-rgb-100), 0.12);\n  --indentation-guide-color-active: rgba(var(--mono-rgb-100), 0.3);\n  /* Inline title */\n  --inline-title-color: var(--h1-color);\n  --inline-title-font: var(--h1-font);\n  --inline-title-line-height: var(--h1-line-height);\n  --inline-title-size: var(--h1-size);\n  --inline-title-style: var(--h1-style);\n  --inline-title-variant: var(--h1-variant);\n  --inline-title-weight: var(--h1-weight);\n  /* Inputs */\n  --input-height: 30px;\n  --input-radius: 5px;\n  --input-font-weight: var(--font-normal);\n  --input-border-width: 1px;\n  /* Italic */\n  --italic-color: inherit;\n  /* Z-index */\n  --layer-cover: 5;\n  --layer-sidedock: 10;\n  --layer-status-bar: 15;\n  --layer-popover: 30;\n  --layer-slides: 45;\n  --layer-modal: 50;\n  --layer-notice: 60;\n  --layer-menu: 65;\n  --layer-tooltip: 70;\n  --layer-dragged-item: 80;\n  /* Line heights */\n  --line-height-normal: 1.5;\n  --line-height-tight: 1.3;\n  /* Links */\n  --link-color: var(--text-accent);\n  --link-color-hover: var(--text-accent-hover);\n  --link-decoration: underline;\n  --link-decoration-hover: underline;\n  --link-decoration-thickness: auto;\n  --link-external-color: var(--text-accent);\n  --link-external-color-hover: var(--text-accent-hover);\n  --link-external-decoration: underline;\n  --link-external-decoration-hover: underline;\n  --link-external-filter: none;\n  --link-unresolved-color: var(--text-accent);\n  --link-unresolved-opacity: 0.7;\n  --link-unresolved-filter: none;\n  --link-unresolved-decoration-style: solid;\n  --link-unresolved-decoration-color: hsla(var(--interactive-accent-hsl), 0.3);\n  /* Lists */\n  --list-indent: 2em;\n  --list-spacing: 0.075em;\n  --list-marker-color: var(--text-faint);\n  --list-marker-color-hover: var(--text-muted);\n  --list-marker-color-collapsed: var(--text-accent);\n  --list-bullet-border: none;\n  --list-bullet-radius: 50%;\n  --list-bullet-size: 0.3em;\n  --list-bullet-transform: none;\n  --list-numbered-style: decimal;\n  /* File navigator */\n  --nav-item-size: var(--font-ui-small);\n  --nav-item-color: var(--text-muted);\n  --nav-item-color-hover: var(--text-normal);\n  --nav-item-color-active: var(--text-normal);\n  --nav-item-color-selected: var(--text-normal);\n  --nav-item-color-highlighted: var(--text-accent-hover);\n  --nav-item-background-hover: var(--background-modifier-hover);\n  --nav-item-background-active: var(--background-modifier-hover);\n  --nav-item-background-selected: hsla(var(--color-accent-hsl), 0.2);\n  --nav-item-padding: var(--size-4-1) var(--size-4-2);\n  --nav-item-parent-padding: var(--nav-item-padding);\n  --nav-item-children-padding-left: var(--size-4-2);\n  --nav-item-children-margin-left: var(--size-4-3);\n  --nav-item-weight: inherit;\n  --nav-item-weight-hover: inherit;\n  --nav-item-weight-active: inherit;\n  --nav-item-white-space: nowrap;\n  --nav-indentation-guide-width: var(--indentation-guide-width);\n  --nav-indentation-guide-color: var(--indentation-guide-color);\n  --nav-collapse-icon-color: var(--collapse-icon-color);\n  --nav-collapse-icon-color-collapsed: var(--text-faint);\n  /* Modals - e.g. settings, community themes, community plugins */\n  --modal-background: var(--background-primary);\n  --modal-width: 90vw;\n  --modal-height: 85vh;\n  --modal-max-width: 1100px;\n  --modal-max-height: 1000px;\n  --modal-max-width-narrow: 800px;\n  --modal-border-width: var(--border-width);\n  --modal-border-color: var(--color-base-40, var(--background-modifier-border-focus));\n  --modal-radius: var(--radius-l);\n  --modal-community-sidebar-width: 280px;\n  /* Popovers - file previews */\n  --popover-width: 450px;\n  --popover-height: 400px;\n  --popover-max-height: 70vh;\n  --popover-pdf-width: 600px;\n  --popover-pdf-height: 800px;\n  --popover-font-size: var(--font-text-size);\n  /* Prompts - e.g. quick switcher, command palette */\n  --prompt-width: 700px;\n  --prompt-max-width: 80vw;\n  --prompt-max-height: 70vh;\n  --prompt-border-width: var(--border-width);\n  --prompt-border-color: var(--color-base-40, var(--background-modifier-border-focus));\n  /* Radiuses */\n  --radius-s: 4px;\n  --radius-m: 8px;\n  --radius-l: 10px;\n  --radius-xl: 16px;\n  /* Ribbon */\n  --ribbon-background: var(--background-secondary);\n  --ribbon-background-collapsed: var(--background-primary);\n  --ribbon-width: 44px;\n  --ribbon-padding: var(--size-4-2) var(--size-4-1) var(--size-4-3);\n  /* Scrollbars */\n  --scrollbar-active-thumb-bg: rgba(var(--mono-rgb-100), 0.2);\n  --scrollbar-bg: rgba(var(--mono-rgb-100), 0.05);\n  --scrollbar-thumb-bg: rgba(var(--mono-rgb-100), 0.1);\n  /* Search */\n  --search-clear-button-color: var(--text-muted);\n  --search-clear-button-size: 13px;\n  --search-icon-color: var(--text-muted);\n  --search-icon-size: 18px;\n  --search-result-background: var(--background-primary);\n  /* Layout sizing - for padding and margins */\n  --size-2-1: 2px;\n  --size-2-2: 4px;\n  --size-2-3: 6px;\n  --size-4-1: 4px;\n  --size-4-2: 8px;\n  --size-4-3: 12px;\n  --size-4-4: 16px;\n  --size-4-5: 20px;\n  --size-4-6: 24px;\n  --size-4-8: 32px;\n  --size-4-9: 36px;\n  --size-4-12: 48px;\n  --size-4-16: 64px;\n  --size-4-18: 72px;\n  /* Sidebar */\n  --sidebar-markdown-font-size: calc(var(--font-text-size) * 0.9);\n  --sidebar-tab-text-display: none;\n  /* Sliders */\n  --slider-thumb-border-width: 1px;\n  --slider-thumb-border-color: var(--background-modifier-border-hover);\n  --slider-thumb-height: 18px;\n  --slider-thumb-width: 18px;\n  --slider-thumb-y: -6px;\n  --slider-thumb-radius: 50%;\n  --slider-s-thumb-size: 15px;\n  --slider-s-thumb-position: -5px;\n  --slider-track-background: var(--background-modifier-border);\n  --slider-track-height: 3px;\n  /* Status bar */\n  --status-bar-background: var(--background-secondary);\n  --status-bar-border-color: var(--divider-color);\n  --status-bar-border-width: 1px 0 0 1px;\n  --status-bar-font-size: var(--font-ui-smaller);\n  --status-bar-text-color: var(--text-muted);\n  --status-bar-position: fixed;\n  --status-bar-radius: var(--radius-m) 0 0 0;\n  /* Swatch for color inputs */\n  --swatch-radius: 14px;\n  --swatch-height: 24px;\n  --swatch-width: 24px;\n  --swatch-shadow: inset 0 0 0 1px rgba(var(--mono-rgb-100), 0.15);\n  /* Tabs */\n  --tab-background-active: var(--background-primary);\n  --tab-text-color: var(--text-faint);\n  --tab-text-color-active: var(--text-muted);\n  --tab-text-color-focused: var(--text-muted);\n  --tab-text-color-focused-active: var(--text-muted);\n  --tab-text-color-focused-highlighted: var(--text-accent);\n  --tab-text-color-focused-active-current: var(--text-normal);\n  --tab-font-size: var(--font-ui-small);\n  --tab-font-weight: inherit;\n  --tab-container-background: var(--background-secondary);\n  --tab-divider-color: var(--background-modifier-border-hover);\n  --tab-outline-color: var(--divider-color);\n  --tab-outline-width: 1px;\n  --tab-curve: 6px;\n  --tab-radius: var(--radius-s);\n  --tab-radius-active: 6px 6px 0 0;\n  --tab-width: 200px;\n  --tab-max-width: 320px;\n  /* Stacked tabs */\n  --tab-stacked-pane-width: 700px;\n  --tab-stacked-header-width: var(--header-height);\n  --tab-stacked-font-size: var(--font-ui-small);\n  --tab-stacked-font-weight: 400;\n  --tab-stacked-text-align: left;\n  --tab-stacked-text-transform: rotate(0deg);\n  --tab-stacked-text-writing-mode: vertical-lr;\n  --tab-stacked-shadow: -8px 0 8px 0 rgba(0, 0, 0, 0.05);\n  /* Tables */\n  --table-background: transparent;\n  --table-border-width: 1px;\n  --table-border-color: var(--background-modifier-border);\n  --table-white-space: normal;\n  --table-header-background: var(--table-background);\n  --table-header-background-hover: inherit;\n  --table-header-border-width: var(--table-border-width);\n  --table-header-border-color: var(--table-border-color);\n  --table-header-font: inherit;\n  --table-header-size: var(--font-text-size);\n  --table-header-weight: var(--bold-weight);\n  --table-header-color: var(--text-normal);\n  --table-text-size: inherit;\n  --table-text-color: inherit;\n  --table-column-max-width: none;\n  --table-column-alt-background: var(--table-background);\n  --table-column-first-border-width: var(--table-border-width);\n  --table-column-last-border-width: var(--table-border-width);\n  --table-row-background-hover: var(--table-background);\n  --table-row-alt-background: var(--table-background);\n  --table-row-last-border-width: var(--table-border-width);\n  /* Tags */\n  --tag-size: var(--font-smaller);\n  --tag-color: var(--text-accent);\n  --tag-color-hover: var(--text-accent);\n  --tag-decoration: none;\n  --tag-decoration-hover: none;\n  --tag-background: hsla(var(--interactive-accent-hsl), 0.1);\n  --tag-background-hover: hsla(var(--interactive-accent-hsl), 0.2);\n  --tag-border-color: hsla(var(--interactive-accent-hsl), 0.15);\n  --tag-border-color-hover: hsla(var(--interactive-accent-hsl), 0.15);\n  --tag-border-width: 0px;\n  --tag-padding-x: 0.65em;\n  --tag-padding-y: 0.25em;\n  --tag-radius: 2em;\n  /* Window frame */\n  --titlebar-background: var(--background-secondary);\n  --titlebar-background-focused: var(--background-secondary-alt);\n  --titlebar-border-width: 0px;\n  --titlebar-border-color: var(--background-modifier-border);\n  --titlebar-text-color: var(--text-muted);\n  --titlebar-text-color-focused: var(--text-normal);\n  --titlebar-text-weight: var(--font-bold);\n  /* Toggles */\n  --toggle-border-width: 2px;\n  --toggle-width: 40px;\n  --toggle-radius: 18px;\n  --toggle-thumb-color: white;\n  --toggle-thumb-radius: 18px;\n  --toggle-thumb-height: 18px;\n  --toggle-thumb-width: 18px;\n  --toggle-s-border-width: 2px;\n  --toggle-s-width: 34px;\n  --toggle-s-thumb-height: 15px;\n  --toggle-s-thumb-width: 15px;\n  /* Vault name */\n  --vault-name-font-size: var(--font-ui-small);\n  --vault-name-font-weight: var(--font-medium);\n  --vault-name-color: var(--text-normal);\n  /* Workspace */\n  --workspace-background-translucent: rgba(var(--mono-rgb-0), 0.6);\n  /* Color mappings ------------------------ */\n  /* Accent HSL values */\n  --accent-h: 254;\n  --accent-s: 80%;\n  --accent-l: 68%;\n  /* Backgrounds */\n  --background-primary: var(--color-base-00);\n  --background-primary-alt: var(--color-base-10);\n  --background-secondary: var(--color-base-20);\n  --background-modifier-hover: rgba(var(--mono-rgb-100), 0.075);\n  --background-modifier-active-hover: hsla(var(--interactive-accent-hsl), 0.15);\n  --background-modifier-border: var(--color-base-30);\n  --background-modifier-border-hover: var(--color-base-35);\n  --background-modifier-border-focus: var(--color-base-40);\n  --background-modifier-error-rgb: var(--color-red-rgb);\n  --background-modifier-error: var(--color-red);\n  --background-modifier-error-hover: var(--color-red);\n  --background-modifier-success-rgb: var(--color-green-rgb);\n  --background-modifier-success: var(--color-green);\n  --background-modifier-message: rgba(0, 0, 0, 0.9);\n  /* Inputs */\n  --background-modifier-form-field: var(--color-base-00);\n  /* Text */\n  --text-normal: var(--color-base-100);\n  --text-muted: var(--color-base-70);\n  --text-faint: var(--color-base-50);\n  --text-on-accent: white;\n  --text-on-accent-inverted: black;\n  --text-error: var(--color-red);\n  --text-success: var(--color-green);\n  --text-selection: hsla(var(--color-accent-hsl), 0.2);\n  --text-accent: var(--color-accent);\n  --text-accent-hover: var(--color-accent-2);\n  --interactive-normal: var(--color-base-00);\n  --interactive-hover: var(--color-base-10);\n  --interactive-accent-hsl: var(--color-accent-hsl);\n  --interactive-accent: var(--color-accent-1);\n  --interactive-accent-hover: var(--color-accent-2);\n}\n.card {\n  color-scheme: light;\n  --highlight-mix-blend-mode: darken;\n  --mono-rgb-0: 255, 255, 255;\n  --mono-rgb-100: 0, 0, 0;\n  --color-red-rgb: 233, 49, 71;\n  --color-red: #E93147;\n  --color-green-rgb: 8, 185, 78;\n  --color-green: #08B94E;\n  --color-orange-rgb: 236, 117, 0;\n  --color-orange: #ec7500;\n  --color-yellow-rgb: 224, 172, 0;\n  --color-yellow: #e0ac00;\n  --color-cyan-rgb: 0, 191, 188;\n  --color-cyan: #00bfbc;\n  --color-blue-rgb: 8, 109, 221;\n  --color-blue: #086DDD;\n  --color-purple-rgb: 120, 82, 238;\n  --color-purple: #7852EE;\n  --color-pink-rgb: 213, 57, 132;\n  --color-pink: #D53984;\n  --color-base-00: #ffffff;\n  --color-base-05: #fcfcfc;\n  --color-base-10: #fafafa;\n  --color-base-20: #f6f6f6;\n  --color-base-25: #e3e3e3;\n  --color-base-30: #e0e0e0;\n  --color-base-35: #d4d4d4;\n  --color-base-40: #bdbdbd;\n  --color-base-50: #ababab;\n  --color-base-60: #707070;\n  --color-base-70: #5a5a5a;\n  --color-base-100: #222222;\n  --color-accent-hsl: var(--accent-h),\n			var(--accent-s),\n			var(--accent-l);\n  --color-accent: hsl(var(--accent-h), var(--accent-s), var(--accent-l));\n  --color-accent-1: hsl(var(--accent-h), var(--accent-s), calc(var(--accent-l) + 2.5%));\n  --color-accent-2: hsl(var(--accent-h), var(--accent-s), calc(var(--accent-l) + 5%));\n  --background-secondary-alt: var(--color-base-05);\n  --background-modifier-box-shadow: rgba(0, 0, 0, 0.1);\n  --background-modifier-cover: rgba(220, 220, 220, 0.4);\n  --text-highlight-bg: rgba(255, 208, 0, 0.4);\n  --text-highlight-bg-active: rgba(255, 128, 0, 0.4);\n  --input-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.12),\n		0 2px 3px 0 rgba(0,0,0,.05),\n		0 1px 1.5px 0 rgba(0,0,0,.03),\n		0 1px 2px 0 rgba(0,0,0,.04),\n		0 0 0 0 transparent;\n  --input-shadow-hover: inset 0 0 0 1px rgba(0, 0, 0, 0.17),\n		0 2px 3px 0 rgba(0,0,0,.1),\n		0 1px 1.5px 0 rgba(0,0,0,.03),\n		0 1px 2px 0 rgba(0,0,0,.04),\n		0 0 0 0 transparent;\n  --shadow-s: 0px 1px 2px rgba(0, 0, 0, 0.028),\n		0px 3.4px 6.7px rgba(0, 0, 0, .042),\n		0px 15px 30px rgba(0, 0, 0, .07);\n  --shadow-l: 0px 1.8px 7.3px rgba(0, 0, 0, 0.071),\n		0px 6.3px 24.7px rgba(0, 0, 0, 0.112),\n		0px 30px 90px rgba(0, 0, 0, 0.2);\n}\n.card.nightMode {\n  color-scheme: dark;\n  --highlight-mix-blend-mode: lighten;\n  --mono-rgb-0: 0, 0, 0;\n  --mono-rgb-100: 255, 255, 255;\n  --color-red-rgb: 251, 70, 76;\n  --color-red: #fb464c;\n  --color-orange-rgb: 233, 151, 63;\n  --color-orange: #E9973F;\n  --color-yellow-rgb: 224, 222, 113;\n  --color-yellow: #E0DE71;\n  --color-green-rgb: 68, 207, 110;\n  --color-green: #44CF6E;\n  --color-cyan-rgb: 83, 223, 221;\n  --color-cyan: #53DFDD;\n  --color-blue-rgb: 2, 122, 255;\n  --color-blue: #027aff;\n  --color-purple-rgb: 168, 130, 255;\n  --color-purple: #a882ff;\n  --color-pink-rgb: 250, 153, 205;\n  --color-pink: #FA99CD;\n  --color-base-00: #1e1e1e;\n  --color-base-10: #242424;\n  --color-base-20: #262626;\n  --color-base-25: #2a2a2a;\n  --color-base-30: #363636;\n  --color-base-35: #3F3F3F;\n  --color-base-40: #555;\n  --color-base-50: #666;\n  --color-base-60: #999;\n  --color-base-70: #bababa;\n  --color-base-100: #dadada;\n  --color-accent-hsl: var(--accent-h),\n			var(--accent-s),\n			var(--accent-l);\n  --color-accent: hsl(var(--accent-h), var(--accent-s), var(--accent-l));\n  --color-accent-1: hsl(var(--accent-h), var(--accent-s), calc(var(--accent-l) - 3.8%));\n  --color-accent-2: hsl(var(--accent-h), var(--accent-s), calc(var(--accent-l) + 3.8%));\n  --background-modifier-form-field: var(--color-base-25);\n  --background-secondary-alt: var(--color-base-30);\n  --interactive-normal: var(--color-base-30);\n  --interactive-hover: var(--color-base-35);\n  --background-modifier-box-shadow: rgba(0, 0, 0, 0.3);\n  --background-modifier-cover: rgba(10, 10, 10, 0.4);\n  --text-highlight-bg: rgba(255, 208, 0, 0.4);\n  --text-highlight-bg-active: rgba(255, 128, 0, 0.4);\n  --text-selection: hsla(var(--interactive-accent-hsl), 0.25);\n  --input-shadow: inset 0 0.5px 0.5px 0.5px rgba(255, 255, 255, 0.09),\n		0 2px 4px 0 rgba(0,0,0,.15),\n		0 1px 1.5px 0 rgba(0,0,0,.1),\n		0 1px 2px 0 rgba(0,0,0,.2),\n		0 0 0 0 transparent;\n  --input-shadow-hover: inset 0 0.5px 1px 0.5px rgba(255, 255, 255, 0.16),\n		0 2px 3px 0 rgba(0,0,0,.3),\n		0 1px 1.5px 0 rgba(0,0,0,.2),\n		0 1px 2px 0 rgba(0,0,0,.4),\n		0 0 0 0 transparent;\n  --shadow-s: 0px 1px 2px rgba(0, 0, 0, 0.121),\n		0px 3.4px 6.7px rgba(0, 0, 0, 0.179),\n		0px 15px 30px rgba(0, 0, 0, 0.3);\n  --shadow-l: 0px 1.8px 7.3px rgba(0, 0, 0, 0.071),\n		0px 6.3px 24.7px rgba(0, 0, 0, 0.112),\n		0px 30px 90px rgba(0, 0, 0, 0.2);\n}\n\n/* Syntax highlighting */\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata,\n.cm-comment,\n.cm-meta {\n  color: var(--code-comment);\n}\n.token.namespace {\n  opacity: 0.7;\n}\n.token.tag,\n.token.constant,\n.token.symbol,\n.token.deleted,\n.cm-tag {\n  color: var(--code-tag);\n}\n.token.punctuation,\n.cm-punctuation,\n.cm-bracket,\n.cm-hr {\n  color: var(--code-punctuation);\n}\n.token.boolean,\n.token.number,\n.cm-number {\n  color: var(--code-value);\n}\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.inserted,\n.cm-qualifier,\n.cm-string,\n.cm-string-2 {\n  color: var(--code-string);\n}\n.token.operator,\n.cm-operator {\n  color: var(--code-operator);\n}\n.token.entity,\n.token.parameter,\n.token.property,\n.token.url,\n.language-css .token.string,\n.style .token.string,\n.token.variable,\n.cm-link,\n.cm-variable,\n.cm-variable-2,\n.cm-variable-3 {\n  color: var(--code-property);\n}\n.token.atrule,\n.token.attr-value,\n.token.builtin,\n.token.function,\n.token.class-name,\n.token.property-access,\n.cm-builtin,\n.cm-property,\n.cm-attribute,\n.cm-type {\n  color: var(--code-function);\n}\n.token.keyword,\n.cm-keyword {\n  color: var(--code-keyword);\n}\n.token.regex,\n.token.important {\n  color: var(--code-important);\n}\n.markdown-rendered code {\n  color: var(--code-normal);\n  font-family: var(--font-monospace);\n  background-color: var(--code-background);\n  border-radius: var(--radius-s);\n  font-size: var(--code-size);\n  padding: 0.1em 0.25em;\n}\n.cm-s-obsidian span.cm-inline-code {\n  color: var(--code-normal);\n  font-size: var(--code-size);\n  background-color: var(--code-background);\n  vertical-align: baseline;\n}\n.cm-s-obsidian span.cm-inline-code.cm-hmd-indented-code {\n  background-color: transparent;\n}\n.cm-s-obsidian span.cm-inline-code:not(.cm-formatting):not(.cm-hmd-indented-code):not(.obsidian-search-match-highlight) {\n  background-color: var(--code-background);\n  vertical-align: baseline;\n}\n.cm-s-obsidian span.cm-inline-code.hmd-hidden-token {\n  font-size: 0;\n}\n.cm-s-obsidian.CodeMirror div.HyperMD-hover > .HyperMD-hover-content code {\n  display: inline-block;\n  font-size: var(--code-size);\n  border: 1px solid #999;\n  border-radius: 2px;\n  padding: 0px 4px;\n}\n.markdown-preview-view .markdown-embed .markdown-preview-view {\n  --file-folding-offset: 0px;\n  height: 100%;\n  padding: 0;\n}\n";

// src/manager.ts
async function isAnkiConnected() {
  console.info("Checking connection to Anki...");
  try {
    await invoke("modelNames");
  } catch (e) {
    new import_obsidian2.Notice("Error, couldn't connect to Anki! Check console for error message.");
    return false;
  }
  new import_obsidian2.Notice("Successfully connected to Anki! This could take a few minutes - please don't close Anki until the plugin is finished");
  return true;
}
async function scanVault(plugin) {
  const app = plugin.app;
  new import_obsidian2.Notice("Scanning vault, check console for details...");
  if (!await isAnkiConnected()) {
    return;
  }
  const obStyleBase64 = btoa(unescape(encodeURIComponent(obsidian_card_default)));
  await storeMediaFile("_obsidian_card.css", obStyleBase64);
  const notice = new import_obsidian2.Notice(
    `Awesome Flashcard: 
Scanning vault... `,
    TIMEOUT_LIKE_INFINITY
  );
  const cachedFileHashes = plugin.settings.cachedFileHashes;
  const newFileHashes = {};
  const files = app.vault.getMarkdownFiles();
  for (let file of files) {
    const fileData = await app.vault.adapter.readBinary(file.path);
    newFileHashes[file.path] = genSha256FromArrayBuf(fileData);
  }
  const unchangedFiles = [];
  const changedFiles = [];
  for (let filePath of Object.keys(newFileHashes)) {
    if (cachedFileHashes.hasOwnProperty(filePath) && cachedFileHashes[filePath] === newFileHashes[filePath]) {
      unchangedFiles.push(filePath);
    } else {
      changedFiles.push(filePath);
    }
  }
  console.log("changedFiles: ", changedFiles);
  const changedFileNotes = [];
  for (let filePath of changedFiles) {
    for (let note of await scanFile(filePath, plugin)) {
      changedFileNotes.push(note);
    }
  }
  const unchangedFileNoteHashes = {};
  const changedFileNoteHashes = {};
  const cachedNoteHashes = plugin.settings.cachedNoteHashes;
  for (let filePath of unchangedFiles) {
    if (cachedNoteHashes.hasOwnProperty(filePath)) {
      unchangedFileNoteHashes[filePath] = cachedNoteHashes[filePath];
    }
  }
  for (let note of changedFileNotes) {
    if (changedFileNoteHashes.hasOwnProperty(note.filePath)) {
      changedFileNoteHashes[note.filePath].push(note.idSha256);
    } else {
      changedFileNoteHashes[note.filePath] = [note.idSha256];
    }
  }
  const newNoteHashes = unionRecords(unchangedFileNoteHashes, changedFileNoteHashes);
  const newNoteHashArr = [];
  for (let fp in newNoteHashes) {
    for (let sha of newNoteHashes[fp]) {
      newNoteHashArr.push(sha);
    }
  }
  const ankiNoteHashArr = await getAnkiNoteHashes();
  console.log("ankiNoteHashArr: ", ankiNoteHashArr, "\nnewNoteHashArr: ", newNoteHashArr);
  const notesToDel = ankiNoteHashArr.filter((oldSha) => !newNoteHashArr.includes(oldSha));
  const notesToMod = changedFileNotes;
  if (notice) {
    notice.setMessage(
      `Awesome Flashcard: 
Notes processed, syncing anki... `
    );
  }
  const newDeckNames = new Set(plugin.settings.cachedDeckNames);
  notesToMod.forEach((v) => newDeckNames.add(v.note.deckName));
  await ensureDecksExist(Array.from(newDeckNames));
  console.log("notesToDel: ", notesToDel, "\nnotesToMod: ", notesToMod);
  await batchDelNotesBySha256(notesToDel);
  await batchModNotes(notesToMod);
  await clearUnusedTags();
  plugin.settings.cachedDeckNames = Array.from(newDeckNames);
  plugin.settings.cachedFileHashes = newFileHashes;
  plugin.settings.cachedNoteHashes = newNoteHashes;
  await plugin.saveSettings();
  console.log("scanVault finished");
  if (notice) {
    notice.setMessage(
      `Awesome Flashcard: 
scanVault finished `
    );
    setTimeout(() => {
      notice.hide();
    }, NOTICE_TIMEOUT);
  }
}
async function scanFile(filePath, plugin) {
  const file = plugin.app.vault.getAbstractFileByPath(filePath);
  if (!(file instanceof import_obsidian2.TFile)) {
    return [];
  }
  const fileContent = await plugin.app.vault.cachedRead(file);
  let deckName = plugin.settings.defaultDeckName;
  let globalTags = [];
  const cache = plugin.app.metadataCache.getCache(filePath);
  if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter["deckName"]) {
    deckName = cache.frontmatter["deckName"];
  }
  if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter["tags"]) {
    globalTags = getTagsFromRaw(cache.frontmatter["tags"]);
  }
  const vaultName = plugin.app.vault.getName();
  console.log(file)
  return await parseNotes(plugin, fileContent, deckName, globalTags, filePath, vaultName);
}
async function parseNotes(plugin, content, deckName, globalTags, filePath, vaultName) {
  const res = [];
  content = content + "\n";

  const regexx = /^#{1,5} [^#]*(?:#(?!#)[^#]*)*/gm;
  const pCont = content.match(regexx);
  if(pCont == null)
    return res;
  const processedContent = pCont.filter(x => x.includes('#card')).map((x) => {
    const lines = x.split('\n');
    const front = lines[0];
    const back = lines.slice(1).join('\n');
    const tag_regex = /\[\[(.*?)\]\]/g;
    const tmatch = front.match(tag_regex);
    if(tag_regex.test(front))
    {
      const pre_tag = tmatch.map(match => match.slice(2, -2));
      const tag = pre_tag.map(x => x.replace(' ','_'));
      return [front, tag, back]
    }
    else
    {
      const tag = 'Obsidian';
      return [front, tag, back]
    }
    
    //console.log('this is front side of card :\n' + front + '\nthis is back side:\n' + back)
  });

//  const processedContent = content.split("---\n").filter((e, i) => i < content.split("---\n").length - 1).filter((e, i) => i > 0).filter((s) => s.includes("#flashcard")).map((s) => {
//    const [front, ...rest] = s.split("#flashcard");
//    const [tag, ...backArr] = rest.join().split("\n");
//    const back = backArr.join("\n");
    //console.log(tag);
//    return [front, tag, back];
//  });

  console.log("parseNotes... filePath: ", filePath, " processedContent: ", processedContent);
  for (let noteMatch of processedContent) {
    let [rawFront, rawTag, rawBack] = [noteMatch[0], noteMatch[1], noteMatch[2]];
    const front = await mdToHtml(plugin, rawFront);
    let back = await mdToHtml(plugin, rawBack);
    back = back + addSrcLink(vaultName, filePath);
    const tags = getTagsFromRaw(rawTag).concat(globalTags).filter((a) => a);
    const note = new AnkiConnectNoteExt(
      deckName,
      front,
      back,
      tags,
      filePath
    );
    console.log(JSON.stringify(note, null, 2));
    res.push(note);
  }
  return res;
}
function addSrcLink(vaultName, filePath) {
  return `<div style="text-align: left;"><br><br><a href="obsidian://open?vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(filePath)}" style="font-size:xx-small;">Source</a></div>`;
}

// src/main.ts
var DEFAULT_SETTINGS = {
  defaultDeckName: "obsidian",
  cachedDeckNames: [],
  cachedFileHashes: {},
  cachedNoteHashes: {}
};
var AwesomeFlashcardPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    (0, import_obsidian3.addIcon)("anki", ANKI_ICON);
    this.addRibbonIcon("anki", "Awesome flashcard - Scan Vault", async () => {
      await scanVault(this);
    });
    this.addCommand({
      id: "process-flashcards-all",
      name: "Process flashcards for all your notes",
      callback: async () => {
        await scanVault(this);
      }
    });
    this.addCommand({
      id: "clear-all-cache",
      name: "Clear all cached data",
      callback: async () => {
        await this.clearCache();
      }
    });
    this.addSettingTab(new AwesomeFlashcardSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.log(this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async clearCache() {
    this.settings.cachedDeckNames = [];
    this.settings.cachedFileHashes = {};
    this.settings.cachedNoteHashes = {};
    await this.saveSettings();
  }
};
var AwesomeFlashcardSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Awesome Flashcard Setting" });
    new import_obsidian3.Setting(containerEl).setName("Default deck name").setDesc("Use this as default deck name if 'deckName' not present in YAML header").addText(
      (text) => text.setValue(this.plugin.settings.defaultDeckName).onChange(async (value) => {
        this.plugin.settings.defaultDeckName = value;
        await this.plugin.clearCache();
      })
    );
    new import_obsidian3.Setting(containerEl).setName("Clear all cache").setDesc("Clear the cached data. Absolutely safe but may slow down the next scan for once").addButton(
      (button) => {
        button.setButtonText("Clear").setClass("mod-cta").onClick(async () => {
          await this.plugin.clearCache();
          new import_obsidian3.Notice("Cache cleared successfully!");
        });
      }
    );
  }
};
